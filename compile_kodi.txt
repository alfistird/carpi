#### install debendencies to build kodi

## dependencies from repo
 - apt-get install libboost1.55-all-dev libboost1.55-tools-dev swig curl libgnutls28-dev libxml2-dev libxslt1-dev libfreetype6-dev libfontconfig1-dev libfribidi-dev libmpeg2-4-dev libmpeg3-dev libmad0-dev libjpeg-dev libsamplerate0-dev libogg-dev libvorbis-dev libflac-dev libtiff5-dev liblzo2-dev cmake zip unzip libsqlite3-dev libpng12-dev libpcre3-dev libjasper-dev libsdl1.2-dev libsdl-image1.2-dev libass-dev libmodplug-dev libcdio-dev libtinyxml2-dev libyajl-dev libgpg-error-dev libgcrypt11-dev libgcrypt20-dev libmicrohttpd-dev autoconf libtool autopoint libudev-dev python-dev python-imaging libmysqlclient-dev libcurl4-gnutls-dev libbz2-dev libtinyxml-dev libssh-dev libxrandr-dev libsmbclient-dev libcap-dev gawk gperf debhelper libiso9660-dev liblockdev1-dev ccache gcc-4.8 g++-4.8 uuid uuid-dev -y 

## libbluetooth
 - apt-get install libbluetooth3 libbluetooth-dev -y

## libcec - when cec is needed to TV
 - apt-get install libcec3 libcec-dev

## taglib
 - apt-get install libtag1-dev libtagc0 libtagc0-dev libtag-extras1 libtag-extras-dev libtaglib2.1-cil libtaglib-cil-dev -y

## dca
 - apt-get install libdca0 libdca-dev libdca-utils -y

## libavahi
 - apt-get install libavahi-common3 libavahi-common-dev libavahi-client3 libavahi-client-dev -y

####
#### Build and install kodi

## create source direcoty
 - mkdir /opt/src-carpc && cd /opt/src-carpc

## git checkout holzingerm fork of https://github.com/xbmc/xbmc.git
 - git clone https://github.com/holzingerm/xbmc.git

### in case we did something wrong before and need to re-run bootstrap or want an 'untouched' xbmc folder, run inside xbmc :
 - git clean -xfd && git reset --hard

## prepare compilation, generate configure files, etc.
 - cd xbmc
 - ./bootstrap

## prepare ld.so.conf
 - echo "/opt/carpc/lib" > /etc/ld.so.conf.d/carpc.conf

## install LIBDCADEV
 - cd tools/depends/target/libdcadec
 - make PREFIX=/usr/local -j4
 - ldconfig

## install libcrossguid
 - cd tools/depends/target/crossguid
 - make PREFIX=/usr/local -j4
 - ldconfig

### run '~/xbmc/configure' with new compiler flags for pi 2 
### takes some time due building ffmpeg (about 20 minutes),
### if you don't want to control kodi with your tv remote, remove '--enable-libcec'
### if using newclock4 branch, use 'with-platform=raspberry-pi2' (instead of ..-pi)

./configure \
--prefix=/opt/carpc \
--disable-shared-lib \
--enable-debug \
--enable-optimizations \
--disable-gl \
--enable-gles \
--disable-profiling \
--disable-x11 \
--enable-ccache \
--enable-alsa \
--disable-dbus \
--disable-pulse \
--enable-ssh \
--disable-rtmp \
--enable-samba \
--enable-nfs \
--enable-upnp \
--disable-mid \
--disable-avahi \
--disable-mdnsembedded \
--enable--non-free \
--enable-mysql \
--disable-webserver \
--disable-optical-drive \
--disable-libbluray \
--enable-texturepacker \
--enable-lirc \
--enable-libusb \
--enable-libbluetooth \
--enable-player=omxplayer \
--with-platform=raspberry-pi2 \
\
CFLAGS="-I/opt/vc/include/ -I/opt/vc/include/interface/vcos/pthreads -I/opt/vc/include/interface/vmcs_host/linux -mfloat-abi=hard -mcpu=cortex-a7 -mfpu=neon-vfpv4" \
\
LDFLAGS="-L/opt/vc/lib" FFMPEG_OPTS="--cpu=cortex-a7" \
\
CXXFLAGS="-I/opt/vc/include/ -I/opt/vc/include/interface/vcos/pthreads -I/opt/vc/include/interface/vmcs_host/linux -mfloat-abi=hard -mcpu=cortex-a7 -mfpu=neon-vfpv4"


# 'FFMPEG_OPTS="use-cpu=cortex-a7"' prevents ffmpeg from auto-selecting '-march=armv7-a' which doesn't like '-mcpu=cortex-a7'

## compiling only on 3 cores, takes 1- 2 hours, seems more stable; set -j4 to use all 4 cores etc. but ssh/wifi/etc may break or the pi will simply run out of memory
## you have to deceide, eg. building over night just use 'make -j1' - it will run through
## just run again, as long as it compiles it is much faster but you have to re-run 'make' again, I would suggest lowering '-jX' evrytime this happens 
## maybe we should increase swapfile for that. Read/Write on sdcard vs multi-cores; who wins? :-)
make -j3



##########################################################################################################################
## and install
sudo make install
###

## make keyboard work for non-root eg inside search-fields for user 'pi'
sudo usermod -aG tty pi
sudo su -c 'echo "KERNEL==\"tty[0-9]*\", GROUP=\"tty\", MODE=\"0660\"" >> /etc/udev/rules.d/99-input.rules'

## make basic start script, TODO ideally stop lightdm before kodi starts and probably much more needed
## you need to run 'fbset -depth 8 && fbset -depth 16' after exiting kodi, else blank screen only
## create very basic script called 'startkodi'
sudo su -c 'echo "kodi" >> /usr/local/bin/startkodi'
sudo su -c 'echo "fbset -depth 8 && fbset -depth 16" >> /usr/local/bin/startkodi'
sudo chmod +x /usr/local/bin/startkodi

###### give gpu more ram now that we actually want to run kodi ###### 
grep -q '^gpu_mem=' /boot/config.txt && sudo sed -i '/^gpu_mem=/c gpu_mem=128' /boot/config.txt || sudo echo 'gpu_mem=128' >> /boot/config.txt
## reboot
sudo reboot

## use 'startkodi' to start kodi

## how to update kodi:
cd xbmc
git clean -xfd
git reset --hard
git pull --rebase
## build and install again with 'bootstrap, configure, make, make install' the same way you did before 

###********** TODO: **********************************************************************************************
### start/stop script for kodi, run as a service? 
### double check configure settings
### TODO use gcc 4.9 (not in wheezy/raspbian repo) and -march=armv7ve  [not really needed]

#************ some additional info *******************************************************************************
## according to http://community.arm.com/groups/tools/blog/2013/04/15/arm-cortex-a-processors-and-gcc-command-lines
## ideally we would use '-mcpu=cortex-a7 -mfpu=neon-vfpv4 -mfloat-abi=hard' everywhere
## when we use -mcpu=cortex-a7 it conflicts with ffmpeg, which automatically selects -march=armv7-a, I really don't want to mess with configure files of ffmpeg # solved?
## they probably do this for good reason. If I understand https://gcc.gnu.org/onlinedocs/gcc/ARM-Options.html correctly, march+mtune would override mcpu
## simple compile test shows that described behaviour
## so we could use whatever we think is best for kodi, and ffmpeg overrides it nontheless (but who knows - conflicting compiler messages do not look healthy)
## I guess this will be fixed in near future # yes it will be with gcc4.9 and -march=armv7e

## other possibility would be to use different flags, eg -march=amv7-a instead of -mcpu=cortex-a7
## more about 'march vs mcpu': http://forum.dlang.org/thread/mailman.1900.1380733301.1719.digitalmars-d-ldc@puremagic.com

#************ obsolete stuff?!************************************************************************************
## is this still needed when compiling on the pi itself? hopefully not :-D
## very confusing with hardcoded armv6 cflags in tools/buildsteps/rbpi/configure-depends and somewehere else I forgot
## we build locally
#sed -i 's/USE_BUILDROOT=1/USE_BUILDROOT=0/' tools/rbp/setup-sdk.sh
#sed -i 's/TOOLCHAIN=\/usr\/local\/bcm-gcc/TOOLCHAIN=\/usr/' tools/rbp/setup-sdk.sh
#sudo sh tools/rbp/setup-sdk.sh

## this disables that configure will run automatically with pre-configured values, so we can have fun with them later :-)
#sed -i 's/cd $(SOURCE); $(CONFIGURE)/#cd $(SOURCE); $(CONFIGURE)/' tools/rbp/depends/xbmc/Makefile 

##this will run bootstrap and build some stuff
#make -C tools/rbp/depends/xbmc/
*******************************************************************************************************************

### old configure, compiler flags for pi 2, taken from https://github.com/archlinuxarm/PKGBUILDs/blob/master/alarm/kodi-rbp/PKGBUILD
##CFLAGS="-Ofast -fexcess-precision=fast -mfloat-abi=hard -mabi=aapcs-linux -pipe -fstack-protector --param=ssp-buffer-size=4 -D_FORTIFY_SOURCE=1 -I/opt/vc/include/ -I/opt/vc/include/interface/vcos/pthreads -I/opt/vc/include/interface/vmcs_host/linux -mcpu=cortex-a7 -mtune=cortex-a7 -mfpu=neon-vfpv4 -mvectorize-with-neon-quad" CXXFLAGS="-Ofast -fexcess-precision=fast -mfloat-abi=hard -mabi=aapcs-linux -pipe -fstack-protector --param=ssp-buffer-size=4 -D_FORTIFY_SOURCE=1 -I/opt/vc/include/ -I/opt/vc/include/interface/vcos/pthreads -I/opt/vc/include/interface/vmcs_host/linux -mcpu=cortex-a7 -mtune=cortex-a7 -mfpu=neon-vfpv4 -mvectorize-with-neon-quad" LDFLAGS="-L/opt/vc/lib" ./configure --disable-gl --enable-gles --with-platform=raspberry-pi --disable-x11 --disable-vaapi --disable-vdpau --disable-avahi --enable-libcec --disable-pulse --disable-projectm --disable-optical-drive --disable-dvdcss --disable-vtbdecoder --enable-alsa --enable-player=omxplayer --enable-ccache
